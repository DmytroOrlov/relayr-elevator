Please complete the following task within a week — it doesn't mean it
takes a week :)

Ideally you should not spend more than 4-5 hours on the task. It's
better to present a simple, but well-tested and documented solution,
than an over-sized and only half working one.

Design and implement an elevator control system in Scala.

Your elevator control system should be able to handle a few elevators
— say up to 16.

In the end, your system should provide an interface for:
 1. querying the state of the elevators (what floor are they on and
    where they are going)
 2. receiving an update about the status of an elevator
 3. receiving a pickup request
 4. time-stepping the simulation

For example, we could imagine an interface like this:

trait ElevatorControlSystem {
  def status(): Seq[(Int, Int, Int)]
  def update(Int, Int, Int)
  def pickup(Int, Int)
  def step()
}

Here we have chosen to represent elevator state as 3 integers:
Elevator ID, Floor Number, Goal Floor Number

A pickup request is two integers: Pickup Floor, Direction (negative
for down, positive for up)

This is not a particularly nice interface, and it leaves some open
questions. For example, the elevator state only has one goal floor;
but it is conceivable that an elevator holds more than one person, and
each person wants to go to a different floor, so there could be a few
goal floors queued up. Please feel free to improve upon this
interface!

The most interesting part of this challenge is the scheduling
problem. The simplest implementation would be to serve requests in
FCFS (first-come, first-served) order. This is clearly bad — imagine
riding such an elevator! Please discuss how your algorithm improves
on FCFS in your write-up, and what data structures and interfaces did
you use.

Please also provide build and run instructions.

Submit your solution as a .zip archive or a public repository
containing the code and documentation.

Good luck!
